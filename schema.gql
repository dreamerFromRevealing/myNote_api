# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Workspace {
  _id: String
  title: String
}

type Document {
  _id: String
  title: String
  folderPathname: String
  parentWorkspaceId: Workspace
  parentFolderId: Folder
  content: String
}

type Folder {
  _id: String
  title: String
  pathname: String
  parentWorkspaceId: Workspace
  parentFolderId: Folder
  childFoldersIds: [Folder]
  childDocsIds: [Document]
}

type Hobby {
  _id: String!
  name: String!
}

type Person {
  _id: String!
  name: String!
  hobbies: [Hobby!]!
}

type TodoTask {
  _id: String
  title: String
  position: Float
  description: String
  parentTodoCollectionId: TodoCollection!
}

type TodoCollection {
  _id: String
  title: String
  color: String
  position: String!
  parentTodoBoardParentId: TodoBoard!
  childrenTodoTaskIds: TodoTask
}

type TodoBoard {
  _id: String
  title: String
  parentWorkspaceId: Workspace
  parentTodoBoxId: TodoBox
  childrenTodoCollectionIds: TodoCollection
}

type TodoBox {
  _id: String
  title: String
  parentWorkspaceId: Workspace
  parentFolderId: Folder
  childTodoBoardIds: [TodoBoard]
}

type Project {
  _id: String
  title: String
  parentWorkspaceId: Workspace
  parentFolderId: Folder
}

type Logbook {
  _id: String
  title: String
  parentWorkspaceId: Workspace
  parentProjectId: Project
}

type Query {
  workspace(_id: String!): Workspace!
  workspaces(filters: ListWorkspacesInput): [Workspace!]!
  document(_id: String!): Document!
  documents(filters: ListDocumentInput): [Document!]!
  folder(_id: String!): Folder!
  folders(filters: ListFolderInput): [Folder!]!
  person(_id: String!): Person!
  persons(filters: ListPersonInput): [Person!]!
  hobby(_id: String!): Hobby!
  hobbies(filters: ListHobbyInput): [Hobby!]!
  todoBox(_id: String!): TodoBox!
  todoBoxes(filters: ListTodoBoxInput): [TodoBox!]!
  todoBoard(_id: String!): TodoBoard!
  todoBoards(filters: ListTodoBoardInput): [TodoBoard!]!
  todoCollection(_id: String!): TodoCollection!
  todoCollections(filters: ListTodoCollectionInput): [TodoCollection!]!
  todoTask(_id: String!): TodoTask!
  todoTasks(filters: ListTodoTaskInput): [TodoTask!]!
  project(_id: String!): Project!
  projects(filters: ListProjectInput): [Project!]!
  logbook(_id: String!): Logbook!
  logbooks(filters: ListLogbookInput): [Logbook!]!
}

input ListWorkspacesInput {
  _id: String
  title: String
}

input ListDocumentInput {
  _id: String
  title: String
  folderPathname: String
  content: String
  parentWorkspaceId: String
}

input ListFolderInput {
  _id: String
  title: String
  pathname: String
  childFoldersIds: String
  parentWorkspaceId: String
  childDocsIds: String
}

input ListPersonInput {
  _id: String
  name: String
  hobbies: String
}

input ListHobbyInput {
  _id: String
  name: String
}

input ListTodoBoxInput {
  _id: String
  title: String
  parentWorkspaceId: String
  parentFolderId: String
  childTodoBoardIds: String
}

input ListTodoBoardInput {
  _id: String
  title: String
  parentTodoBoxId: String
  childrenTodoCollectionIds: String
  parentWorkspaceId: String
}

input ListTodoCollectionInput {
  _id: String
  title: String
  color: String
  position: Float
  parentTodoBoardParentId: String
  childrenTodoTaskIds: String
}

input ListTodoTaskInput {
  _id: String
  title: String
  description: String
  position: Float
  parentTodoCollectionId: String
}

input ListProjectInput {
  _id: String
  title: String
  parentWorkspaceId: String!
  parentFolderId: String
}

input ListLogbookInput {
  _id: String
  title: String
  parentProjectId: String
  parentWorkspaceId: String
}

type Mutation {
  createWorkspace(payload: CreateWorkspaceInput!): Workspace!
  updateWorkspace(payload: UpdateWorkspaceInput!): Workspace!
  deleteWorkspace(_id: String!): Workspace!
  createDocument(payload: CreateDocumentInput!): Document!
  updateDocument(payload: UpdateDocumentInput!): Document!
  deleteDocument(_id: String!): Document!
  changeDocumentParent(payload: ChangeParentIdInput!): Document!
  createFolder(payload: CreateFolderInput!): Folder!
  updateFolder(payload: UpdateFolderInput!): Folder!
  deleteFolder(_id: String!): Folder!
  changeFolderParent(payload: ChangeParentIdInput!): Folder!
  createPerson(payload: CreatePersonInput!): Person!
  updatePerson(payload: UpdatePersonInput!): Person!
  deletePerson(_id: String!): Person!
  createHobby(payload: CreateHobbyInput!): Hobby!
  updateHobby(payload: UpdateHobbyInput!): Hobby!
  deleteHobby(_id: String!): Hobby!
  createTodoBox(payload: CreateTodoBoxInput!): TodoBox!
  updateTodoBox(payload: UpdateTodoBoxInput!): TodoBox!
  deleteTodoBox(_id: String!): TodoBox!
  createTodoBoard(payload: CreateTodoBoardInput!): TodoBoard!
  updateTodoBoard(payload: UpdateTodoBoardInput!): TodoBoard!
  deleteTodoBoard(_id: String!): TodoBoard!
  createTodoCollection(payload: CreateTodoCollectionInput!): TodoCollection!
  updateTodoCollection(payload: UpdateTodoCollectionInput!): TodoCollection!
  deleteTodoCollection(_id: String!): TodoCollection!
  updatePositionTodoCollection(payload: UpdatePositionArrTodoCollectionsInput!): [TodoCollection!]!
  createTodoTask(payload: CreateTodoTaskInput!): TodoTask!
  updateTodoTask(payload: UpdateTodoTaskInput!): TodoTask!
  deleteTodoTask(_id: String!): TodoTask!
  updatePositionTodoTask(payload: UpdatePositionArrTodoTasksInput!): [TodoTask!]!
  createProject(payload: CreateProjectInput!): Project!
  updateProject(payload: UpdateProjectInput!): Project!
  deleteProject(_id: String!): Project!
  createLogbook(payload: CreateLogbookInput!): Logbook!
  updateLogbook(payload: UpdateLogbookInput!): Logbook!
  deleteLogbook(_id: String!): Logbook!
}

input CreateWorkspaceInput {
  title: String!
}

input UpdateWorkspaceInput {
  _id: String!
  title: String
}

input CreateDocumentInput {
  title: String!
  parentFolderId: String
  parentWorkspaceId: String!
}

input UpdateDocumentInput {
  _id: String!
  title: String
  folderPathname: String
  content: String
  parentWorkspaceId: String
}

input ChangeParentIdInput {
  _id: String!
  newParentId: String
}

input CreateFolderInput {
  title: String!
  parentFolderId: String
  parentWorkspaceId: String!
}

input UpdateFolderInput {
  _id: String!
  title: String
  pathname: String
  childFoldersIds: String
  childDocsIds: String
  parentWorkspaceId: String
}

input CreatePersonInput {
  name: String!
  hobbies: [String!]!
}

input UpdatePersonInput {
  _id: String!
  name: String
  hobbies: String
}

input CreateHobbyInput {
  name: String!
}

input UpdateHobbyInput {
  _id: String!
  name: String
}

input CreateTodoBoxInput {
  title: String!
  parentFolderId: String
  parentWorkspaceId: String!
}

input UpdateTodoBoxInput {
  _id: String!
  title: String
  parentWorkspaceId: String
  parentFolderId: String
  childTodoBoardIds: String
}

input CreateTodoBoardInput {
  title: String!
  parentTodoBoxId: String!
}

input UpdateTodoBoardInput {
  _id: String!
  title: String
  parentTodoBoxId: String
  childrenTodoCollectionIds: String
  parentWorkspaceId: String
}

input CreateTodoCollectionInput {
  title: String!
  color: String
  position: Float!
  parentTodoBoardParentId: String!
}

input UpdateTodoCollectionInput {
  _id: String!
  title: String
  color: String
  position: Float
  parentTodoBoardParentId: String
  childrenTodoTaskIds: String
}

input UpdatePositionArrTodoCollectionsInput {
  todoCollections: [UpdatePositionTodoCollectionInput!]!
}

input UpdatePositionTodoCollectionInput {
  _id: String!
  position: Float!
}

input CreateTodoTaskInput {
  title: String!
  position: Float!
  description: String
  parentTodoCollectionId: String!
}

input UpdateTodoTaskInput {
  _id: String!
  title: String
  description: String
  position: Float
  parentTodoCollectionId: String
}

input UpdatePositionArrTodoTasksInput {
  todoTasks: [UpdatePositionTodoTaskInput!]!
}

input UpdatePositionTodoTaskInput {
  _id: String!
  position: Float!
  parentTodoCollectionId: String
}

input CreateProjectInput {
  title: String!
  parentWorkspaceId: String!
  parentFolderId: String
}

input UpdateProjectInput {
  _id: String!
  title: String
  parentWorkspaceId: String!
  parentFolderId: String
}

input CreateLogbookInput {
  title: String!
  parentProjectId: String!
  parentWorkspaceId: String!
}

input UpdateLogbookInput {
  _id: String!
  title: String
  parentProjectId: String
  parentWorkspaceId: String
}
